!function(a, b) {
    function c(a) {
        return "number" == typeof a;
    }
    function d(a) {
        return a !== e && null !== a;
    }
    var e, f, g, h = a.Chart, i = a.extend, j = a.each;
    g = [ "path", "rect", "circle" ], f = {
        top: 0,
        left: 0,
        center: .5,
        middle: .5,
        bottom: 1,
        right: 1
    };
    var k = b.inArray, l = a.merge, m = function() {
        this.init.apply(this, arguments);
    };
    m.prototype = {
        init: function(a, b) {
            var c = b.shape && b.shape.type;
            this.chart = a;
            var d, e;
            e = {
                xAxis: 0,
                yAxis: 0,
                title: {
                    style: {},
                    text: "",
                    x: 0,
                    y: 0
                },
                shape: {
                    params: {
                        stroke: "#000000",
                        fill: "transparent",
                        strokeWidth: 2
                    }
                }
            }, d = {
                circle: {
                    params: {
                        x: 0,
                        y: 0
                    }
                }
            }, d[c] && (e.shape = l(e.shape, d[c])), this.options = l({}, e, b);
        },
        render: function(a) {
            var b = this.chart, c = this.chart.renderer, d = this.group, e = this.title, f = this.shape, h = this.options, i = h.title, j = h.shape;
            d || (d = this.group = c.g()), !f && j && k(j.type, g) !== -1 && (f = this.shape = c[h.shape.type](j.params), 
            f.add(d)), !e && i && (e = this.title = c.label(i), e.add(d)), d.add(b.annotations.group), 
            this.linkObjects(), a !== !1 && this.redraw();
        },
        redraw: function() {
            var b, e, g, h, j = this.options, l = this.chart, m = this.group, n = this.title, o = this.shape, p = this.linkedObject, q = l.xAxis[j.xAxis], r = l.yAxis[j.yAxis], s = j.width, t = j.height, u = f[j.anchorY], v = f[j.anchorX];
            if (p && (b = p instanceof a.Point ? "point" : p instanceof a.Series ? "series" : null, 
            "point" === b ? (j.xValue = p.x, j.yValue = p.y, e = p.series) : "series" === b && (e = p), 
            m.visibility !== e.group.visibility && m.attr({
                visibility: e.group.visibility
            })), p = d(j.xValue) ? q.toPixels(j.xValue + q.minPointOffset) - q.minPixelPadding : j.x, 
            b = d(j.yValue) ? r.toPixels(j.yValue) : j.y, !isNaN(p) && !isNaN(b) && c(p) && c(b)) {
                if (n && (n.attr(j.title), n.css(j.title.style)), o) {
                    if (n = i({}, j.shape.params), "values" === j.units) {
                        for (g in n) k(g, [ "width", "x" ]) > -1 ? n[g] = q.translate(n[g]) : k(g, [ "height", "y" ]) > -1 && (n[g] = r.translate(n[g]));
                        if (n.width && (n.width -= q.toPixels(0) - q.left), n.x && (n.x += q.minPixelPadding), 
                        "path" === j.shape.type) {
                            g = n.d, e = p;
                            for (var w = b, x = g.length, y = 0; y < x; ) "number" == typeof g[y] && "number" == typeof g[y + 1] ? (g[y] = q.toPixels(g[y]) - e, 
                            g[y + 1] = r.toPixels(g[y + 1]) - w, y += 2) : y += 1;
                        }
                    }
                    "circle" === j.shape.type && (n.x += n.r, n.y += n.r), o.attr(n);
                }
                m.bBox = null, c(s) || (h = m.getBBox(), s = h.width), c(t) || (h || (h = m.getBBox()), 
                t = h.height), c(v) || (v = f.center), c(u) || (u = f.center), p -= s * v, b -= t * u, 
                l.animation && d(m.translateX) && d(m.translateY) ? m.animate({
                    translateX: p,
                    translateY: b
                }) : m.translate(p, b);
            }
        },
        destroy: function() {
            var a = this, b = this.chart.annotations.allItems, c = b.indexOf(a);
            c > -1 && b.splice(c, 1), j([ "title", "shape", "group" ], function(b) {
                a[b] && (a[b].destroy(), a[b] = null);
            }), a.group = a.title = a.shape = a.chart = a.options = null;
        },
        update: function(a, b) {
            i(this.options, a), this.linkObjects(), this.render(b);
        },
        linkObjects: function() {
            var a = this.chart, b = this.linkedObject, c = b && (b.id || b.options.id), e = this.options.linkedTo;
            d(e) ? d(b) && e === c || (this.linkedObject = a.get(e)) : this.linkedObject = null;
        }
    }, i(h.prototype, {
        annotations: {
            add: function(a, b) {
                var c, d, e = this.allItems, f = this.chart;
                for ("[object Array]" === Object.prototype.toString.call(a) || (a = [ a ]), d = a.length; d--; ) c = new m(f, a[d]), 
                e.push(c), c.render(b);
            },
            redraw: function() {
                j(this.allItems, function(a) {
                    a.redraw();
                });
            }
        }
    }), h.prototype.callbacks.push(function(b) {
        var c, d = b.options.annotations;
        c = b.renderer.g("annotations"), c.attr({
            zIndex: 7
        }), c.add(), b.annotations.allItems = [], b.annotations.chart = b, b.annotations.group = c, 
        "[object Array]" === Object.prototype.toString.call(d) && d.length > 0 && b.annotations.add(b.options.annotations), 
        a.addEvent(b, "redraw", function() {
            b.annotations.redraw();
        });
    });
}(Highcharts, HighchartsAdapter), function(a, b) {
    function c(a) {
        var b, c;
        return c = {
            xAxis: 0,
            yAxis: 0,
            title: {
                style: {},
                text: "",
                x: 0,
                y: 0
            },
            shape: {
                params: {
                    stroke: "#000000",
                    fill: "transparent",
                    strokeWidth: 2
                }
            }
        }, b = {
            circle: {
                params: {
                    x: 0,
                    y: 0
                }
            }
        }, b[a] && (c.shape = o(c.shape, b[a])), c;
    }
    function d(a) {
        return "[object Array]" === Object.prototype.toString.call(a);
    }
    function e(a) {
        return "number" == typeof a;
    }
    function f(a) {
        return a !== h && null !== a;
    }
    function g(a, b, c, d, e) {
        for (var f = a.length, g = 0; g < f; ) "number" == typeof a[g] && "number" == typeof a[g + 1] ? (a[g] = b.toPixels(a[g]) - d, 
        a[g + 1] = c.toPixels(a[g + 1]) - e, g += 2) : g += 1;
        return a;
    }
    var h, i, j, k = a.Chart, l = a.extend, m = a.each;
    j = [ "path", "rect", "circle" ], i = {
        top: 0,
        left: 0,
        center: .5,
        middle: .5,
        bottom: 1,
        right: 1
    };
    var n = b.inArray, o = a.merge, p = function() {
        this.init.apply(this, arguments);
    };
    p.prototype = {
        init: function(a, b) {
            var d = b.shape && b.shape.type;
            this.chart = a, this.options = o({}, c(d), b);
        },
        render: function(a) {
            var b = this, c = this.chart, d = b.chart.renderer, e = b.group, f = b.title, g = b.shape, h = b.options, i = h.title, k = h.shape;
            e || (e = b.group = d.g()), !g && k && n(k.type, j) !== -1 && (g = b.shape = d[h.shape.type](k.params), 
            g.add(e)), !f && i && (f = b.title = d.label(i), f.add(e)), e.add(c.annotations.group), 
            b.linkObjects(), a !== !1 && b.redraw();
        },
        redraw: function() {
            var b, c, d, h, j, k, m, o = this.options, p = this.chart, q = this.group, r = this.title, s = this.shape, t = this.linkedObject, u = p.xAxis[o.xAxis], v = p.yAxis[o.yAxis], w = o.width, x = o.height, y = i[o.anchorY], z = i[o.anchorX], A = !1;
            if (t && (c = t instanceof a.Point ? "point" : t instanceof a.Series ? "series" : null, 
            "point" === c ? (o.xValue = t.x, o.yValue = t.y, d = t.series) : "series" === c && (d = t), 
            q.visibility !== d.group.visibility && q.attr({
                visibility: d.group.visibility
            })), k = f(o.xValue) ? u.toPixels(o.xValue + u.minPointOffset) - u.minPixelPadding : o.x, 
            m = f(o.yValue) ? v.toPixels(o.yValue) : o.y, !isNaN(k) && !isNaN(m) && e(k) && e(m)) {
                if (r && (r.attr(o.title), r.css(o.title.style), A = !0), s) {
                    if (b = l({}, o.shape.params), "values" === o.units) {
                        for (h in b) n(h, [ "width", "x" ]) > -1 ? b[h] = u.translate(b[h]) : n(h, [ "height", "y" ]) > -1 && (b[h] = v.translate(b[h]));
                        b.width && (b.width -= u.toPixels(0) - u.left), b.x && (b.x += u.minPixelPadding), 
                        "path" === o.shape.type && g(b.d, u, v, k, m);
                    }
                    "circle" === o.shape.type && (b.x += b.r, b.y += b.r), A = !0, s.attr(b);
                }
                q.bBox = null, e(w) || (j = q.getBBox(), w = j.width), e(x) || (j || (j = q.getBBox()), 
                x = j.height), e(z) || (z = i.center), e(y) || (y = i.center), k -= w * z, m -= x * y, 
                p.animation && f(q.translateX) && f(q.translateY) ? q.animate({
                    translateX: k,
                    translateY: m
                }) : q.translate(k, m);
            }
        },
        destroy: function() {
            var a = this, b = this.chart, c = b.annotations.allItems, d = c.indexOf(a);
            d > -1 && c.splice(d, 1), m([ "title", "shape", "group" ], function(b) {
                a[b] && (a[b].destroy(), a[b] = null);
            }), a.group = a.title = a.shape = a.chart = a.options = null;
        },
        update: function(a, b) {
            l(this.options, a), this.linkObjects(), this.render(b);
        },
        linkObjects: function() {
            var a = this, b = a.chart, c = a.linkedObject, d = c && (c.id || c.options.id), e = a.options, g = e.linkedTo;
            f(g) ? f(c) && g === d || (a.linkedObject = b.get(g)) : a.linkedObject = null;
        }
    }, l(k.prototype, {
        annotations: {
            add: function(a, b) {
                var c, e, f = this.allItems, g = this.chart;
                for (d(a) || (a = [ a ]), e = a.length; e--; ) c = new p(g, a[e]), f.push(c), c.render(b);
            },
            redraw: function() {
                m(this.allItems, function(a) {
                    a.redraw();
                });
            }
        }
    }), k.prototype.callbacks.push(function(b) {
        var c, e = b.options.annotations;
        c = b.renderer.g("annotations"), c.attr({
            zIndex: 7
        }), c.add(), b.annotations.allItems = [], b.annotations.chart = b, b.annotations.group = c, 
        d(e) && e.length > 0 && b.annotations.add(b.options.annotations), a.addEvent(b, "redraw", function() {
            b.annotations.redraw();
        });
    });
}(Highcharts, HighchartsAdapter);
//# sourceMappingURL=annotations.min.js.map
/*! 康美网络医院 最后修改于： 2016-10-20 */