!function(a, b, c) {
    var d = function() {
        for (var a = /audio(.min)?.js.*/, b = document.getElementsByTagName("script"), c = 0, d = b.length; c < d; c++) {
            var e = b[c].getAttribute("src");
            if (a.test(e)) return e.replace(a, "");
        }
    }();
    c[a] = {
        instanceCount: 0,
        instances: {},
        flashSource: '      <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="$1" width="1" height="1" name="$1" style="position: absolute; left: -1px;">         <param name="movie" value="$2?playerInstance=' + a + '.instances[\'$1\']&datetime=$3">         <param name="allowscriptaccess" value="always">         <embed name="$1" src="$2?playerInstance=' + a + '.instances[\'$1\']&datetime=$3" width="1" height="1" allowscriptaccess="always">       </object>',
        settings: {
            autoplay: !1,
            loop: !1,
            preload: !0,
            imageLocation: d + "player-graphics.gif",
            swfLocation: d + "audiojs.swf",
            useFlash: function() {
                var a = document.createElement("audio");
                return !(a.canPlayType && a.canPlayType("audio/mpeg;").replace(/no/, ""));
            }(),
            hasFlash: function() {
                if (navigator.plugins && navigator.plugins.length && navigator.plugins["Shockwave Flash"]) return !0;
                if (navigator.mimeTypes && navigator.mimeTypes.length) {
                    var a = navigator.mimeTypes["application/x-shockwave-flash"];
                    return a && a.enabledPlugin;
                }
                try {
                    return new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), !0;
                } catch (b) {}
                return !1;
            }(),
            createPlayer: {
                markup: '          <div class="play-pause">             <p class="play"></p>             <p class="pause"></p>             <p class="loading"></p>             <p class="error"></p>           </div>           <div class="scrubber">             <div class="progress"></div>             <div class="loaded"></div>           </div>           <div class="time">             <em class="played">00:00</em>/<strong class="duration">00:00</strong>           </div>           <div class="error-message"></div>',
                playPauseClass: "play-pause",
                scrubberClass: "scrubber",
                progressClass: "progress",
                loaderClass: "loaded",
                timeClass: "time",
                durationClass: "duration",
                playedClass: "played",
                errorMessageClass: "error-message",
                playingClass: "playing",
                loadingClass: "loading",
                errorClass: "error"
            },
            css: '        .audiojs audio { position: absolute; left: -1px; }         .audiojs { width: 330px; height: 36px; background: #404040; overflow: hidden; font-family: monospace; font-size: 12px;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #444), color-stop(0.5, #555), color-stop(0.51, #444), color-stop(1, #444));           background-image: -moz-linear-gradient(center top, #444 0%, #555 50%, #444 51%, #444 100%);           -webkit-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); -moz-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3);           -o-box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.3); }         .audiojs .play-pause { width: 25px; height: 40px; padding: 4px 6px; margin: 0px; float: left; overflow: hidden; border-right: 1px solid #000; }         .audiojs p { display: none; width: 25px; height: 40px; margin: -15px 0px 0px -7px; cursor: pointer; }         .audiojs .play { display: block; }         .audiojs .scrubber { position: relative; float: left; width: 100px; background: #5a5a5a; height: 14px; margin: 10px; border-top: 1px solid #3f3f3f; border-left: 0px; border-bottom: 0px; overflow: hidden; }         .audiojs .progress { position: absolute; top: 0px; left: 0px; height: 14px; width: 0px; background: #ccc; z-index: 1;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #ccc), color-stop(0.5, #ddd), color-stop(0.51, #ccc), color-stop(1, #ccc));           background-image: -moz-linear-gradient(center top, #ccc 0%, #ddd 50%, #ccc 51%, #ccc 100%); }         .audiojs .loaded { position: absolute; top: 0px; left: 0px; height: 14px; width: 0px; background: #000;           background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #222), color-stop(0.5, #333), color-stop(0.51, #222), color-stop(1, #222));           background-image: -moz-linear-gradient(center top, #222 0%, #333 50%, #222 51%, #222 100%); }         .audiojs .time { float: left; height: 36px; line-height: 36px; margin: -15px -90px 0px 0px; padding: 0px 6px 0px 12px; border-left: 1px solid #000; color: #ddd; text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.5); }         .audiojs .time em { padding: 0px 2px 0px 0px; color: #f9f9f9; font-style: normal; }         .audiojs .time strong { padding: 0px 0px 0px 2px; font-weight: normal; }         .audiojs .error-message { float: left; display: none; margin: 0px 10px; height: 36px; width: 400px; overflow: hidden; line-height: 36px; white-space: nowrap; color: #fff;           text-overflow: ellipsis; -o-text-overflow: ellipsis; -icab-text-overflow: ellipsis; -khtml-text-overflow: ellipsis; -moz-text-overflow: ellipsis; -webkit-text-overflow: ellipsis; }         .audiojs .error-message a { color: #eee; text-decoration: none; padding-bottom: 1px; border-bottom: 1px solid #999; white-space: wrap; }                 .audiojs .play { background: url("$1") -2px -1px no-repeat; }         .audiojs .loading { background: url("$1") -2px -31px no-repeat; }         .audiojs .error { background: url("$1") -2px -61px no-repeat; }         .audiojs .pause { background: url("$1") -2px -91px no-repeat; }                 .playing .play, .playing .loading, .playing .error { display: none; }         .playing .pause { display: block; }                 .loading .play, .loading .pause, .loading .error { display: none; }         .loading .loading { display: block; }                 .error .time, .error .play, .error .pause, .error .scrubber, .error .loading { display: none; }         .error .error { display: block; }         .error .play-pause p { cursor: auto; }         .error .error-message { display: block; }',
            trackEnded: function() {},
            flashError: function() {
                var b = this.settings.createPlayer, d = e(b.errorMessageClass, this.wrapper), f = 'Missing <a href="http://get.adobe.com/flashplayer/">flash player</a> plugin.';
                this.mp3 && (f += ' <a href="' + this.mp3 + '">Download audio file</a>.'), c[a].helpers.removeClass(this.wrapper, b.loadingClass), 
                c[a].helpers.addClass(this.wrapper, b.errorClass), d.innerHTML = f;
            },
            loadError: function() {
                var b = this.settings.createPlayer, d = e(b.errorMessageClass, this.wrapper);
                c[a].helpers.removeClass(this.wrapper, b.loadingClass), c[a].helpers.addClass(this.wrapper, b.errorClass), 
                d.innerHTML = 'Error loading: "' + this.mp3 + '"';
            },
            init: function() {
                c[a].helpers.addClass(this.wrapper, this.settings.createPlayer.loadingClass);
            },
            loadStarted: function() {
                var b = this.settings.createPlayer, d = e(b.durationClass, this.wrapper), f = Math.floor(this.duration / 60), g = Math.floor(this.duration % 60);
                c[a].helpers.removeClass(this.wrapper, b.loadingClass), d.innerHTML = (f < 10 ? "0" : "") + f + ":" + (g < 10 ? "0" : "") + g;
            },
            loadProgress: function(a) {
                var b = this.settings.createPlayer, c = e(b.scrubberClass, this.wrapper);
                e(b.loaderClass, this.wrapper).style.width = c.offsetWidth * a + "px";
            },
            playPause: function() {
                this.playing ? this.settings.play() : this.settings.pause();
            },
            play: function() {
                c[a].helpers.addClass(this.wrapper, this.settings.createPlayer.playingClass);
            },
            pause: function() {
                c[a].helpers.removeClass(this.wrapper, this.settings.createPlayer.playingClass);
            },
            updatePlayhead: function(a) {
                var b = this.settings.createPlayer, c = e(b.scrubberClass, this.wrapper);
                e(b.progressClass, this.wrapper).style.width = c.offsetWidth * a + "px", b = e(b.playedClass, this.wrapper), 
                c = this.duration * a, a = Math.floor(c / 60), c = Math.floor(c % 60), b.innerHTML = (a < 10 ? "0" : "") + a + ":" + (c < 10 ? "0" : "") + c;
            }
        },
        create: function(a, b) {
            return b = b || {}, a.length ? this.createAll(b, a) : this.newInstance(a, b);
        },
        createAll: function(a, b) {
            var c = b || document.getElementsByTagName("audio"), d = [];
            a = a || {};
            for (var e = 0, f = c.length; e < f; e++) d.push(this.newInstance(c[e], a));
            return d;
        },
        newInstance: function(a, d) {
            var e = this.helpers.clone(this.settings), f = "audiojs" + this.instanceCount, g = "audiojs_wrapper" + this.instanceCount;
            return this.instanceCount++, null != a.getAttribute("autoplay") && (e.autoplay = !0), 
            null != a.getAttribute("loop") && (e.loop = !0), "none" == a.getAttribute("preload") && (e.preload = !1), 
            d && this.helpers.merge(e, d), e.createPlayer.markup ? a = this.createPlayer(a, e.createPlayer, g) : a.parentNode.setAttribute("id", g), 
            g = new c[b](a, e), e.css && this.helpers.injectCss(g, e.css), e.useFlash && e.hasFlash ? (this.injectFlash(g, f), 
            this.attachFlashEvents(g.wrapper, g)) : e.useFlash && !e.hasFlash && this.settings.flashError.apply(g), 
            (!e.useFlash || e.useFlash && e.hasFlash) && this.attachEvents(g.wrapper, g), this.instances[f] = g;
        },
        createPlayer: function(a, b, c) {
            var d = document.createElement("div"), e = a.cloneNode(!0);
            return d.setAttribute("class", "audiojs"), d.setAttribute("className", "audiojs"), 
            d.setAttribute("id", c), e.outerHTML && !document.createElement("audio").canPlayType ? (e = this.helpers.cloneHtml5Node(a), 
            d.innerHTML = b.markup, d.appendChild(e), a.outerHTML = d.outerHTML, d = document.getElementById(c)) : (d.appendChild(e), 
            d.innerHTML += b.markup, a.parentNode.replaceChild(d, a)), d.getElementsByTagName("audio")[0];
        },
        attachEvents: function(b, d) {
            if (d.settings.createPlayer) {
                var f = d.settings.createPlayer, g = e(f.playPauseClass, b), h = e(f.scrubberClass, b);
                c[a].events.addListener(g, "click", function() {
                    d.playPause.apply(d);
                }), c[a].events.addListener(h, "click", function(a) {
                    a = a.clientX;
                    var b = this, c = 0;
                    if (b.offsetParent) do c += b.offsetLeft; while (b = b.offsetParent);
                    d.skipTo((a - c) / h.offsetWidth);
                }), d.settings.useFlash || (c[a].events.trackLoadProgress(d), c[a].events.addListener(d.element, "timeupdate", function() {
                    d.updatePlayhead.apply(d);
                }), c[a].events.addListener(d.element, "ended", function() {
                    d.trackEnded.apply(d);
                }), c[a].events.addListener(d.source, "error", function() {
                    clearInterval(d.readyTimer), clearInterval(d.loadTimer), d.settings.loadError.apply(d);
                }));
            }
        },
        attachFlashEvents: function(a, b) {
            b.swfReady = !1, b.load = function(a) {
                b.mp3 = a, b.swfReady && b.element.load(a);
            }, b.loadProgress = function(a, c) {
                b.loadedPercent = a, b.duration = c, b.settings.loadStarted.apply(b), b.settings.loadProgress.apply(b, [ a ]);
            }, b.skipTo = function(a) {
                a > b.loadedPercent || (b.updatePlayhead.call(b, [ a ]), b.element.skipTo(a));
            }, b.updatePlayhead = function(a) {
                b.settings.updatePlayhead.apply(b, [ a ]);
            }, b.play = function() {
                b.settings.preload || (b.settings.preload = !0, b.element.init(b.mp3)), b.playing = !0, 
                b.element.pplay(), b.settings.play.apply(b);
            }, b.pause = function() {
                b.playing = !1, b.element.ppause(), b.settings.pause.apply(b);
            }, b.setVolume = function(a) {
                b.element.setVolume(a);
            }, b.loadStarted = function() {
                b.swfReady = !0, b.settings.preload && b.element.init(b.mp3), b.settings.autoplay && b.play.apply(b);
            };
        },
        injectFlash: function(a, b) {
            var c = this.flashSource.replace(/\$1/g, b);
            c = c.replace(/\$2/g, a.settings.swfLocation), c = c.replace(/\$3/g, +new Date() + Math.random());
            var d = a.wrapper.innerHTML, e = document.createElement("div");
            e.innerHTML = c + d, a.wrapper.innerHTML = e.innerHTML, a.element = this.helpers.getSwf(b);
        },
        helpers: {
            merge: function(a, b) {
                for (attr in b) (a.hasOwnProperty(attr) || b.hasOwnProperty(attr)) && (a[attr] = b[attr]);
            },
            clone: function(a) {
                if (null == a || "object" != typeof a) return a;
                var b, c = new a.constructor();
                for (b in a) c[b] = arguments.callee(a[b]);
                return c;
            },
            addClass: function(a, b) {
                RegExp("(\\s|^)" + b + "(\\s|$)").test(a.className) || (a.className += " " + b);
            },
            removeClass: function(a, b) {
                a.className = a.className.replace(RegExp("(\\s|^)" + b + "(\\s|$)"), " ");
            },
            injectCss: function(a, b) {
                for (var c = "", d = document.getElementsByTagName("style"), e = b.replace(/\$1/g, a.settings.imageLocation), f = 0, g = d.length; f < g; f++) {
                    var h = d[f].getAttribute("title");
                    if (h && ~h.indexOf("audiojs")) {
                        if (g = d[f], g.innerHTML === e) return;
                        c = g.innerHTML;
                        break;
                    }
                }
                d = document.getElementsByTagName("head")[0], f = d.firstChild, g = document.createElement("style"), 
                d && (g.setAttribute("type", "text/css"), g.setAttribute("title", "audiojs"), g.styleSheet ? g.styleSheet.cssText = c + e : g.appendChild(document.createTextNode(c + e)), 
                f ? d.insertBefore(g, f) : d.appendChild(styleElement));
            },
            cloneHtml5Node: function(a) {
                var b = document.createDocumentFragment(), c = b.createElement ? b : document;
                return c.createElement("audio"), c = c.createElement("div"), b.appendChild(c), c.innerHTML = a.outerHTML, 
                c.firstChild;
            },
            getSwf: function(a) {
                return a = document[a] || window[a], a.length > 1 ? a[a.length - 1] : a;
            }
        },
        events: {
            memoryLeaking: !1,
            listeners: [],
            addListener: function(b, d, e) {
                b.addEventListener ? b.addEventListener(d, e, !1) : b.attachEvent && (this.listeners.push(b), 
                this.memoryLeaking || (window.attachEvent("onunload", function() {
                    if (this.listeners) for (var b = 0, d = this.listeners.length; b < d; b++) c[a].events.purge(this.listeners[b]);
                }), this.memoryLeaking = !0), b.attachEvent("on" + d, function() {
                    e.call(b, window.event);
                }));
            },
            trackLoadProgress: function(a) {
                if (a.settings.preload) {
                    var b, c;
                    a = a;
                    var d = /(ipod|iphone|ipad)/i.test(navigator.userAgent);
                    b = setInterval(function() {
                        a.element.readyState > -1 && (d || a.init.apply(a)), a.element.readyState > 1 && (a.settings.autoplay && a.play.apply(a), 
                        clearInterval(b), c = setInterval(function() {
                            a.loadProgress.apply(a), a.loadedPercent >= 1 && clearInterval(c);
                        }));
                    }, 10), a.readyTimer = b, a.loadTimer = c;
                }
            },
            purge: function(a) {
                var b, c = a.attributes;
                if (c) for (b = 0; b < c.length; b += 1) "function" == typeof a[c[b].name] && (a[c[b].name] = null);
                if (c = a.childNodes) for (b = 0; b < c.length; b += 1) purge(a.childNodes[b]);
            },
            ready: function() {
                return function(a) {
                    var b = window, c = !1, d = !0, e = b.document, f = e.documentElement, g = e.addEventListener ? "addEventListener" : "attachEvent", h = e.addEventListener ? "removeEventListener" : "detachEvent", i = e.addEventListener ? "" : "on", j = function(d) {
                        "readystatechange" == d.type && "complete" != e.readyState || (("load" == d.type ? b : e)[h](i + d.type, j, !1), 
                        !c && (c = !0) && a.call(b, d.type || d));
                    }, k = function() {
                        try {
                            f.doScroll("left");
                        } catch (a) {
                            return void setTimeout(k, 50);
                        }
                        j("poll");
                    };
                    if ("complete" == e.readyState) a.call(b, "lazy"); else {
                        if (e.createEventObject && f.doScroll) {
                            try {
                                d = !b.frameElement;
                            } catch (l) {}
                            d && k();
                        }
                        e[g](i + "DOMContentLoaded", j, !1), e[g](i + "readystatechange", j, !1), b[g](i + "load", j, !1);
                    }
                };
            }()
        }
    }, c[b] = function(a, b) {
        this.element = a, this.wrapper = a.parentNode, this.source = a.getElementsByTagName("source")[0] || a, 
        this.mp3 = function(a) {
            var b = a.getElementsByTagName("source")[0];
            return a.getAttribute("src") || (b ? b.getAttribute("src") : null);
        }(a), this.settings = b, this.loadStartedCalled = !1, this.loadedPercent = 0, this.duration = 1, 
        this.playing = !1;
    }, c[b].prototype = {
        updatePlayhead: function() {
            this.settings.updatePlayhead.apply(this, [ this.element.currentTime / this.duration ]);
        },
        skipTo: function(a) {
            a > this.loadedPercent || (this.element.currentTime = this.duration * a, this.updatePlayhead());
        },
        load: function(b) {
            this.loadStartedCalled = !1, this.source.setAttribute("src", b), this.element.load(), 
            this.mp3 = b, c[a].events.trackLoadProgress(this);
        },
        loadError: function() {
            this.settings.loadError.apply(this);
        },
        init: function() {
            this.settings.init.apply(this);
        },
        loadStarted: function() {
            return !!this.element.duration && (this.duration = this.element.duration, this.updatePlayhead(), 
            void this.settings.loadStarted.apply(this));
        },
        loadProgress: function() {
            null != this.element.buffered && this.element.buffered.length && (this.loadStartedCalled || (this.loadStartedCalled = this.loadStarted()), 
            this.loadedPercent = this.element.buffered.end(this.element.buffered.length - 1) / this.duration, 
            this.settings.loadProgress.apply(this, [ this.loadedPercent ]));
        },
        playPause: function() {
            this.playing ? this.pause() : this.play();
        },
        play: function() {
            /(ipod|iphone|ipad)/i.test(navigator.userAgent) && 0 == this.element.readyState && this.init.apply(this), 
            this.settings.preload || (this.settings.preload = !0, this.element.setAttribute("preload", "auto"), 
            c[a].events.trackLoadProgress(this)), this.playing = !0, this.element.play(), this.settings.play.apply(this);
        },
        pause: function() {
            this.playing = !1, this.element.pause(), this.settings.pause.apply(this);
        },
        setVolume: function(a) {
            this.element.volume = a;
        },
        trackEnded: function() {
            this.skipTo.apply(this, [ 0 ]), this.settings.loop || this.pause.apply(this), this.settings.trackEnded.apply(this);
        }
    };
    var e = function(a, b) {
        var c = [];
        if (b = b || document, b.getElementsByClassName) c = b.getElementsByClassName(a); else {
            var d, e, f = b.getElementsByTagName("*"), g = RegExp("(^|\\s)" + a + "(\\s|$)");
            for (d = 0, e = f.length; d < e; d++) g.test(f[d].className) && c.push(f[d]);
        }
        return c.length > 1 ? c : c[0];
    };
}("audiojs", "audiojsInstance", this);
//# sourceMappingURL=audio.min.js.map
/*! 康美网络医院 最后修改于： 2016-10-20 */