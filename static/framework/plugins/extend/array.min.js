Array.prototype.every || (Array.prototype.every = function(a) {
    var b = this.length;
    if ("function" != typeof a) throw new TypeError();
    for (var c = arguments[1], d = 0; d < b; d++) if (d in this && !a.call(c, this[d], d, this)) return !1;
    return !0;
}), Array.prototype.filter || (Array.prototype.filter = function(a) {
    var b = this.length;
    if ("function" != typeof a) throw new TypeError();
    for (var c = new Array(), d = arguments[1], e = 0; e < b; e++) if (e in this) {
        var f = this[e];
        a.call(d, f, e, this) && c.push(f);
    }
    return c;
}), Array.prototype.forEach || (Array.prototype.forEach = function(a) {
    var b = this.length;
    if ("function" != typeof a) throw new TypeError();
    for (var c = arguments[1], d = 0; d < b; d++) d in this && a.call(c, this[d], d, this);
}), Array.prototype.map || (Array.prototype.map = function(a) {
    var b = this.length;
    if ("function" != typeof a) throw new TypeError();
    for (var c = new Array(b), d = arguments[1], e = 0; e < b; e++) e in this && (c[e] = a.call(d, this[e], e, this));
    return c;
}), Array.prototype.some || (Array.prototype.some = function(a) {
    var b = this.length;
    if ("function" != typeof a) throw new TypeError();
    for (var c = arguments[1], d = 0; d < b; d++) if (d in this && a.call(c, this[d], d, this)) return !0;
    return !1;
}), Array.prototype.sortNum || (Array.prototype.sortNum = function() {
    return this.sort(function(a, b) {
        return a - b;
    });
}), Array.prototype.find || (Array.prototype.find = function(a) {
    var b = !1;
    for (i = 0; i < this.length; i++) "function" == typeof a ? a.test(this[i]) && (b || (b = []), 
    b.push(i)) : this[i] === a && (b || (b = []), b.push(i));
    return b;
}), Array.prototype.shuffle || (Array.prototype.shuffle = function() {
    for (var a, b, c = this.length; c; a = parseInt(Math.random() * c), b = this[--c], 
    this[c] = this[a], this[a] = b) ;
    return this;
}), Array.prototype.compare || (Array.prototype.compare = function(a) {
    if (this.length != a.length) return !1;
    for (var b = 0; b < a.length; b++) {
        if (this[b].compare && !this[b].compare(a[b])) return !1;
        if (this[b] !== a[b]) return !1;
    }
    return !0;
}), Array.prototype.unique || (Array.prototype.unique = function() {
    for (var a = this || [], b = {}, c = 0; c < a.length; c++) b[a[c]] = !0;
    a.length = 0;
    for (var c in b) this[a.length] = c;
    return a;
}), Array.prototype.addAll || (Array.prototype.addAll = function(a) {
    if (null != a && 0 != a.length) for (var b = 0; b < a.length; b++) this.push(a[b]);
}), Array.prototype.contains || (Array.prototype.contains = function(a) {
    for (var b = 0; b < this.length; b++) {
        var c = this[b];
        if (c == a) return !0;
    }
    return !1;
}), Array.prototype.indexOf || (Array.prototype.indexOf = function(a) {
    for (var b = 0; b < this.length; b++) if (this[b] == a) return b;
    return -1;
}), Array.prototype.lastIndexOf || (Array.prototype.lastIndexOf = function(a) {
    var b = this.length, c = Number(arguments[1]);
    for (isNaN(c) ? c = b - 1 : (c = c < 0 ? Math.ceil(c) : Math.floor(c), c < 0 ? c += b : c >= b && (c = b - 1)); c > -1; c--) if (c in this && this[c] === a) return c;
    return -1;
}), Array.prototype.insertAt || (Array.prototype.insertAt = function(a, b) {
    b < 0 ? this.unshift(a) : b >= this.length ? this.push(a) : this.splice(b, 0, a);
}), Array.prototype.removeByIndex || (Array.prototype.removeByIndex = function(a) {
    return a < 0 ? this : void this.splice(a, 1);
}), Array.prototype.remove || (Array.prototype.remove = function(a) {
    var b = this.indexOf(a);
    b != -1 && this.splice(b, 1);
}), Array.prototype.removeAll || (Array.prototype.removeAll = function() {
    for (;this.length > 0; ) this.pop();
}), Array.prototype.replace || (Array.prototype.replace = function(a, b) {
    for (var c = 0; c < this.length; c++) if (this[c] == a) return void (this[c] = b);
}), Array.prototype.swap || (Array.prototype.swap = function(a, b) {
    if (a != b) {
        var c = this[a];
        this[a] = this[b], this[b] = c;
    }
}), Array.prototype.max || (Array.prototype.max = function() {
    return Math.max.apply({}, this);
}), Array.prototype.min || (Array.prototype.min = function() {
    return Math.min.apply({}, this);
}), Array.prototype.splice || (Array.prototype.splice = function(a, b, c) {
    var d = this.length;
    a = a < 0 ? 0 : a > d ? d : a ? a : 0, b = b < 0 ? 0 : b > d ? d : b ? b : d;
    var e = [], f = [], g = 0, h = 0, i = 0;
    for (i = 0; i < d; i++) i < a || h >= b ? e[g++] = this[i] : (f[h++] = this[i], 
    c && h == b && (e[g++] = c));
    c && h < b && (e[g] = c);
    for (var i = 0; i < e.length; i++) this[i] = e[i];
    return this.length = e.length, f;
}), Array.prototype.concat || (Array.prototype.concat = function() {
    for (var a = 0; a < arguments.length; ) if ("object" != typeof arguments[a] || "function" != typeof arguments[a].splice || arguments[a].propertyIsEnumerable("length")) this[this.length] = arguments[a++]; else {
        for (var b = 0; b < arguments[a].length; ) this.splice(this.length, 0, arguments[a][b++]);
        a++;
    }
    return this;
}), Array.prototype.join || (Array.prototype.join = function(a) {
    for (var b = 0, c = ""; b < this.length; ) c += this[b++] + a;
    return c;
}), Array.prototype.pop || (Array.prototype.pop = function() {
    return this.splice(this.length - 1, 1)[0];
}), Array.prototype.push || (Array.prototype.push = function() {
    return Array.prototype.splice.apply(this, [ this.length, 0 ].concat(Array.prototype.slice.apply(arguments))), 
    this.length;
}), Array.prototype.reverse || (Array.prototype.reverse = function() {
    for (var a = 0; a < this.length / 2; a++) {
        var b = this[a];
        this[a] = this[this.length - 1 - a], this[this.length - 1 - a] = b;
    }
    return this;
}), Array.prototype.slice || (Array.prototype.slice = function(a, b) {
    var c = this.length;
    a = a < 0 ? a += c : a ? a : 0, b = b < 0 ? b += c : b > c ? c : b ? b : c;
    for (var d = a, e = []; d < b; ) e.push(this[d++]);
    return e;
}), Array.prototype.unshift || (Array.prototype.unshift = function() {
    Array.prototype.splice.apply(this, [ 0, 0 ].concat(Array.prototype.slice.apply(this, arguments)));
}), Array.prototype.shift || (Array.prototype.shift = function() {
    return this ? this.splice(0, 1)[0] : [];
});
//# sourceMappingURL=array.min.js.map
/*! 康美网络医院 最后修改于： 2016-10-20 */