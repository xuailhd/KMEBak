!function(a, b) {
    "use strict";
    function c(a) {
        if (null == a) return "";
        switch (typeof a) {
          case "string":
            return a;

          case "number":
            return "" + a;

          default:
            return w(a);
        }
    }
    function d(a, b) {
        for (var c = a.split(/\n/g), d = 0; d < c.length; d++) {
            var e = c[d];
            if (!(b >= e.length)) return {
                line: d + 1,
                column: b + 1
            };
            b -= e.length;
        }
    }
    function e(a) {
        function b(b) {
            return a;
        }
        var c = x[a];
        return null != c ? c : (b.$$watchDelegate = function(b, c, d) {
            var e = b.$watch(u, function() {
                v(c) && c.call(null, a, a, b), e();
            }, d);
            return e;
        }, x[a] = b, b.exp = a, b.expressions = [], b);
    }
    function f(a, b) {
        function c(a) {
            return void 0 == a ? a : a - b;
        }
        function d(b) {
            return c(a(b));
        }
        if (0 === b) return a;
        var e;
        return d.$$watchDelegate = function(b, d, f) {
            return e = b.$watch(a, function(a, e) {
                v(d) && d.call(null, c(a), c(e), b);
            }, f);
        }, d;
    }
    function g(a, b) {
        var c = this;
        if (this.expressionFn = a, this.choices = b, void 0 === b.other) throw t("reqother", "“other” is a required option.");
        this.parsedFn = function(a) {
            return c.getResult(a);
        }, this.parsedFn.$$watchDelegate = function(a, b, d) {
            return c.watchDelegate(a, b, d);
        }, this.parsedFn.exp = a.exp, this.parsedFn.expressions = a.expressions;
    }
    function h(a, b, c, d) {
        var e = this;
        this.scope = b, this.msgSelector = a, this.listener = c, this.objectEquality = d, 
        this.lastMessage = void 0, this.messageFnWatcher = u;
        var f = function(a, b) {
            return e.expressionFnListener(a, b);
        };
        this.expressionFnWatcher = b.$watch(a.expressionFn, f, d);
    }
    function i(a, b) {
        g.call(this, a, b);
    }
    function j() {}
    function k(a, b, c, d) {
        g.call(this, a, b), this.offset = c, this.pluralCat = d;
    }
    function l() {}
    function m(a, b) {
        this.trustedContext = a, this.allOrNothing = b, this.textParts = [], this.expressionFns = [], 
        this.expressionIndices = [], this.partialText = "", this.concatParts = null;
    }
    function n(a, b, c, d) {
        this.interpolationParts = a, this.scope = b, this.previousResult = void 0, this.listener = c;
        var e = this;
        this.expressionFnsWatcher = b.$watchGroup(a.expressionFns, function(a, b) {
            e.watchListener(a, b);
        });
    }
    function o(a, b) {
        b.expressionFn = a.expressionFn, b.expressionMinusOffsetFn = a.expressionMinusOffsetFn, 
        b.pluralOffset = a.pluralOffset, b.choices = a.choices, b.choiceKey = a.choiceKey, 
        b.interpolationParts = a.interpolationParts, b.ruleChoiceKeyword = a.ruleChoiceKeyword, 
        b.msgStartIndex = a.msgStartIndex, b.expressionStartIndex = a.expressionStartIndex;
    }
    function p(a) {
        o(a, this);
    }
    function q(a, b, c, d, e, f, g, h) {
        this.text = a, this.index = b || 0, this.$parse = c, this.pluralCat = d, this.stringifier = e, 
        this.mustHaveExpression = !!f, this.trustedContext = g, this.allOrNothing = !!h, 
        this.expressionFn = null, this.expressionMinusOffsetFn = null, this.pluralOffset = null, 
        this.choices = null, this.choiceKey = null, this.interpolationParts = null, this.msgStartIndex = null, 
        this.nestedStateStack = [], this.parsedFn = null, this.rule = null, this.ruleStack = null, 
        this.ruleChoiceKeyword = null, this.interpNestLevel = null, this.expressionStartIndex = null, 
        this.stringStartIndex = null, this.stringQuote = null, this.stringInterestsRe = null, 
        this.angularOperatorStack = null, this.textPart = null;
    }
    function r(a) {
        switch (a) {
          case "{":
            return "}";

          case "[":
            return "]";

          case "(":
            return ")";

          default:
            return null;
        }
    }
    function s(a) {
        switch (a) {
          case "}":
            return "{";

          case "]":
            return "[";

          case ")":
            return "(";

          default:
            return null;
        }
    }
    var t = a.angular.$interpolateMinErr, u = a.angular.noop, v = a.angular.isFunction, w = a.angular.toJson, x = Object.create(null);
    g.prototype.getMessageFn = function(a) {
        return this.choices[this.categorizeValue(a)];
    }, g.prototype.getResult = function(a) {
        return this.getMessageFn(this.expressionFn(a))(a);
    }, g.prototype.watchDelegate = function(a, b, c) {
        var d = new h(this, a, b, c);
        return function() {
            d.cancelWatch();
        };
    }, h.prototype.expressionFnListener = function(a, b) {
        var c = this;
        this.messageFnWatcher();
        var d = function(a, b) {
            return c.messageFnListener(a, b);
        }, e = this.msgSelector.getMessageFn(a);
        this.messageFnWatcher = this.scope.$watch(e, d, this.objectEquality);
    }, h.prototype.messageFnListener = function(a, b) {
        v(this.listener) && this.listener.call(null, a, a === b ? a : this.lastMessage, this.scope), 
        this.lastMessage = a;
    }, h.prototype.cancelWatch = function() {
        this.expressionFnWatcher(), this.messageFnWatcher();
    }, j.prototype = g.prototype, i.prototype = new j(), i.prototype.categorizeValue = function(a) {
        return void 0 !== this.choices[a] ? a : "other";
    }, l.prototype = g.prototype, k.prototype = new l(), k.prototype.categorizeValue = function(a) {
        if (isNaN(a)) return "other";
        if (void 0 !== this.choices[a]) return a;
        var b = this.pluralCat(a - this.offset);
        return void 0 !== this.choices[b] ? b : "other";
    }, m.prototype.flushPartialText = function() {
        this.partialText && (null == this.concatParts ? this.textParts.push(this.partialText) : (this.textParts.push(this.concatParts.join("")), 
        this.concatParts = null), this.partialText = "");
    }, m.prototype.addText = function(a) {
        a.length && (this.partialText ? this.concatParts ? this.concatParts.push(a) : this.concatParts = [ this.partialText, a ] : this.partialText = a);
    }, m.prototype.addExpressionFn = function(a) {
        this.flushPartialText(), this.expressionIndices.push(this.textParts.length), this.expressionFns.push(a), 
        this.textParts.push("");
    }, m.prototype.getExpressionValues = function(a) {
        for (var b = new Array(this.expressionFns.length), c = 0; c < this.expressionFns.length; c++) b[c] = this.expressionFns[c](a);
        return b;
    }, m.prototype.getResult = function(a) {
        for (var b = 0; b < this.expressionIndices.length; b++) {
            var c = a[b];
            if (this.allOrNothing && void 0 === c) return;
            this.textParts[this.expressionIndices[b]] = c;
        }
        return this.textParts.join("");
    }, m.prototype.toParsedFn = function(a, b) {
        var c = this;
        if (this.flushPartialText(), !a || 0 !== this.expressionFns.length) {
            if (0 === this.textParts.length) return e("");
            if (this.trustedContext && this.textParts.length > 1 && t.throwNoconcat(b), 0 === this.expressionFns.length) return 1 != this.textParts.length && this.errorInParseLogic(), 
            e(this.textParts[0]);
            var d = function(a) {
                return c.getResult(c.getExpressionValues(a));
            };
            d.$$watchDelegate = function(a, b, d) {
                return c.watchDelegate(a, b, d);
            }, d.exp = b, d.expressions = new Array(this.expressionFns.length);
            for (var f = 0; f < this.expressionFns.length; f++) d.expressions[f] = this.expressionFns[f].exp;
            return d;
        }
    }, m.prototype.watchDelegate = function(a, b, c) {
        var d = new n(this, a, b, c);
        return function() {
            d.cancelWatch();
        };
    }, n.prototype.watchListener = function(a, b) {
        var c = this.interpolationParts.getResult(a);
        v(this.listener) && this.listener.call(null, c, a === b ? c : this.previousResult, this.scope), 
        this.previousResult = c;
    }, n.prototype.cancelWatch = function() {
        this.expressionFnsWatcher();
    };
    var y = new p(new q("", 0, null, null, null, (!1), null, (!1)));
    q.prototype.pushState = function() {
        this.nestedStateStack.push(new p(this)), o(y, this);
    }, q.prototype.popState = function() {
        0 === this.nestedStateStack.length && this.errorInParseLogic();
        var a = this.nestedStateStack.pop();
        o(a, this);
    }, q.prototype.matchRe = function(a, b) {
        a.lastIndex = this.index;
        var c = a.exec(this.text);
        return null == c || b !== !0 && c.index != this.index ? null : (this.index = a.lastIndex, 
        c);
    }, q.prototype.searchRe = function(a) {
        return this.matchRe(a, !0);
    }, q.prototype.consumeRe = function(a) {
        return !!this.matchRe(a);
    }, q.prototype.run = function(a) {
        this.ruleStack = [ a ];
        do {
            for (this.rule = this.ruleStack.pop(); this.rule; ) this.rule();
            this.assertRuleOrNull(this.rule);
        } while (this.ruleStack.length > 0);
    }, q.prototype.errorInParseLogic = function() {
        throw t("logicbug", "The messageformat parser has encountered an internal error.  Please file a github issue against the AngularJS project and provide this message text that triggers the bug.  Text: “{0}”", this.text);
    }, q.prototype.assertRuleOrNull = function(a) {
        void 0 === a && this.errorInParseLogic();
    };
    var z = /\s*(\w+)\s*/g;
    q.prototype.errorExpecting = function() {
        var a, b = this.matchRe(z);
        if (null == b) throw a = d(this.text, this.index), t("reqarg", "Expected one of “plural” or “select” at line {0}, column {1} of text “{2}”", a.line, a.column, this.text);
        var c = b[1];
        throw "select" == c || "plural" == c ? (a = d(this.text, this.index), t("reqcomma", "Expected a comma after the keyword “{0}” at line {1}, column {2} of text “{3}”", c, a.line, a.column, this.text)) : (a = d(this.text, this.index), 
        t("unknarg", "Unsupported keyword “{0}” at line {0}, column {1}. Only “plural” and “select” are currently supported.  Text: “{3}”", c, a.line, a.column, this.text));
    };
    var A = /['"]/g;
    q.prototype.ruleString = function() {
        var a = this.matchRe(A);
        if (null == a) {
            var b = d(this.text, this.index);
            throw t("wantstring", "Expected the beginning of a string at line {0}, column {1} in text “{2}”", b.line, b.column, this.text);
        }
        this.startStringAtMatch(a);
    }, q.prototype.startStringAtMatch = function(a) {
        this.stringStartIndex = a.index, this.stringQuote = a[0], this.stringInterestsRe = "'" == this.stringQuote ? B : C, 
        this.rule = this.ruleInsideString;
    };
    var B = /\\(?:\\|'|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2}|[0-7]{3}|\r\n|\n|[\s\S])|'/g, C = /\\(?:\\|"|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2}|[0-7]{3}|\r\n|\n|[\s\S])|"/g;
    q.prototype.ruleInsideString = function() {
        var a = this.searchRe(this.stringInterestsRe);
        if (null == a) {
            var b = d(this.text, this.stringStartIndex);
            throw t("untermstr", "The string beginning at line {0}, column {1} is unterminated in text “{2}”", b.line, b.column, this.text);
        }
        a[0];
        a == this.stringQuote && (this.rule = null);
    };
    var D = /\s*(plural|select)\s*,\s*/g;
    q.prototype.rulePluralOrSelect = function() {
        var a = this.searchRe(D);
        null == a && this.errorExpecting();
        var b = a[1];
        switch (b) {
          case "plural":
            this.rule = this.rulePluralStyle;
            break;

          case "select":
            this.rule = this.ruleSelectStyle;
            break;

          default:
            this.errorInParseLogic();
        }
    }, q.prototype.rulePluralStyle = function() {
        this.choices = Object.create(null), this.ruleChoiceKeyword = this.rulePluralValueOrKeyword, 
        this.rule = this.rulePluralOffset;
    }, q.prototype.ruleSelectStyle = function() {
        this.choices = Object.create(null), this.ruleChoiceKeyword = this.ruleSelectKeyword, 
        this.rule = this.ruleSelectKeyword;
    };
    var E = /[0]|(?:[1-9][0-9]*)/g, F = new RegExp("\\s*offset\\s*:\\s*(" + E.source + ")", "g");
    q.prototype.rulePluralOffset = function() {
        var a = this.matchRe(F);
        this.pluralOffset = null == a ? 0 : parseInt(a[1], 10), this.expressionMinusOffsetFn = f(this.expressionFn, this.pluralOffset), 
        this.rule = this.rulePluralValueOrKeyword;
    }, q.prototype.assertChoiceKeyIsNew = function(a, b) {
        if (void 0 !== this.choices[a]) {
            var c = d(this.text, b);
            throw t("dupvalue", "The choice “{0}” is specified more than once. Duplicate key is at line {1}, column {2} in text “{3}”", a, c.line, c.column, this.text);
        }
    };
    var G = /\s*(\w+)/g;
    q.prototype.ruleSelectKeyword = function() {
        var a = this.matchRe(G);
        return null == a ? (this.parsedFn = new i(this.expressionFn, this.choices).parsedFn, 
        void (this.rule = null)) : (this.choiceKey = a[1], this.assertChoiceKeyIsNew(this.choiceKey, a.index), 
        void (this.rule = this.ruleMessageText));
    };
    var H = new RegExp("\\s*(?:(?:=(" + E.source + "))|(\\w+))", "g");
    q.prototype.rulePluralValueOrKeyword = function() {
        var a = this.matchRe(H);
        return null == a ? (this.parsedFn = new k(this.expressionFn, this.choices, this.pluralOffset, this.pluralCat).parsedFn, 
        void (this.rule = null)) : (null != a[1] ? this.choiceKey = parseInt(a[1], 10) : this.choiceKey = a[2], 
        this.assertChoiceKeyIsNew(this.choiceKey, a.index), void (this.rule = this.ruleMessageText));
    };
    var I = /\s*{/g;
    q.prototype.ruleMessageText = function() {
        if (!this.consumeRe(I)) {
            var a = d(this.text, this.index);
            throw t("reqopenbrace", "The plural choice “{0}” must be followed by a message in braces at line {1}, column {2} in text “{3}”", this.choiceKey, a.line, a.column, this.text);
        }
        this.msgStartIndex = this.index, this.interpolationParts = new m(this.trustedContext, this.allOrNothing), 
        this.rule = this.ruleInInterpolationOrMessageText;
    };
    var J = /\\.|{{|}/g, K = /\\.|{{|#|}/g, L = /\\.|{{/g;
    q.prototype.advanceInInterpolationOrMessageText = function() {
        var a, b = this.index;
        if (null == this.ruleChoiceKeyword) {
            if (a = this.searchRe(L), null == a) return this.textPart = this.text.substring(b), 
            this.index = this.text.length, null;
        } else if (a = this.searchRe(this.ruleChoiceKeyword == this.rulePluralValueOrKeyword ? K : J), 
        null == a) {
            var c = d(this.text, this.msgStartIndex);
            throw t("reqendbrace", "The plural/select choice “{0}” message starting at line {1}, column {2} does not have an ending closing brace. Text “{3}”", this.choiceKey, c.line, c.column, this.text);
        }
        var e = a[0];
        return this.textPart = this.text.substring(b, a.index), e;
    }, q.prototype.ruleInInterpolationOrMessageText = function() {
        var a = this.index, b = this.advanceInInterpolationOrMessageText();
        return null == b ? (this.index = this.text.length, this.interpolationParts.addText(this.text.substring(a)), 
        void (this.rule = null)) : "\\" == b[0] ? void this.interpolationParts.addText(this.textPart + b[1]) : (this.interpolationParts.addText(this.textPart), 
        void ("{{" == b ? (this.pushState(), this.ruleStack.push(this.ruleEndMustacheInInterpolationOrMessage), 
        this.rule = this.ruleEnteredMustache) : "}" == b ? (this.choices[this.choiceKey] = this.interpolationParts.toParsedFn(!1, this.text), 
        this.rule = this.ruleChoiceKeyword) : "#" == b ? this.interpolationParts.addExpressionFn(this.expressionMinusOffsetFn) : this.errorInParseLogic()));
    }, q.prototype.ruleInterpolate = function() {
        this.interpolationParts = new m(this.trustedContext, this.allOrNothing), this.rule = this.ruleInInterpolation;
    }, q.prototype.ruleInInterpolation = function() {
        var a = this.index, b = this.searchRe(L);
        if (null == b) return this.index = this.text.length, this.interpolationParts.addText(this.text.substring(a)), 
        this.parsedFn = this.interpolationParts.toParsedFn(this.mustHaveExpression, this.text), 
        void (this.rule = null);
        var c = b[0];
        return "\\" == c[0] ? void this.interpolationParts.addText(this.text.substring(a, b.index) + c[1]) : (this.interpolationParts.addText(this.text.substring(a, b.index)), 
        this.pushState(), this.ruleStack.push(this.ruleInterpolationEndMustache), void (this.rule = this.ruleEnteredMustache));
    }, q.prototype.ruleInterpolationEndMustache = function() {
        var a = this.parsedFn;
        this.popState(), this.interpolationParts.addExpressionFn(a), this.rule = this.ruleInInterpolation;
    }, q.prototype.ruleEnteredMustache = function() {
        this.parsedFn = null, this.ruleStack.push(this.ruleEndMustache), this.rule = this.ruleAngularExpression;
    }, q.prototype.ruleEndMustacheInInterpolationOrMessage = function() {
        var a = this.parsedFn;
        this.popState(), this.interpolationParts.addExpressionFn(a), this.rule = this.ruleInInterpolationOrMessageText;
    };
    var M = /\s*}}/g;
    q.prototype.ruleEndMustache = function() {
        var a = this.matchRe(M);
        if (null == a) {
            var b = d(this.text, this.index);
            throw t("reqendinterp", "Expecting end of interpolation symbol, “{0}”, at line {1}, column {2} in text “{3}”", "}}", b.line, b.column, this.text);
        }
        null == this.parsedFn && (this.parsedFn = this.$parse(this.expressionFn, this.stringifier), 
        this.parsedFn.exp = this.expressionFn.exp, this.parsedFn.expressions = this.expressionFn.expressions), 
        this.rule = null;
    }, q.prototype.ruleAngularExpression = function() {
        this.angularOperatorStack = [], this.expressionStartIndex = this.index, this.rule = this.ruleInAngularExpression;
    };
    var N = /[[\]{}()'",]/g;
    q.prototype.ruleInAngularExpression = function() {
        var a, b = (this.index, this.searchRe(N));
        if (null == b) {
            if (0 === this.angularOperatorStack.length) return this.index = this.text.length, 
            this.expressionFn = this.$parse(this.text.substring(this.expressionStartIndex, this.index)), 
            this.expressionFn.exp = this.text.substring(this.expressionStartIndex, this.index), 
            this.expressionFn.expressions = this.expressionFn.expressions, void (this.rule = null);
            var c = this.angularOperatorStack[0];
            throw t("badexpr", "Unexpected end of Angular expression.  Expecting operator “{0}” at the end of the text “{1}”", this.getEndOperator(c), this.text);
        }
        var e = b[0];
        if ("'" == e || '"' == e) return this.ruleStack.push(this.ruleInAngularExpression), 
        void this.startStringAtMatch(b);
        if ("," == e) {
            if (this.trustedContext) throw a = d(this.text, this.index), t("unsafe", "Use of select/plural MessageFormat syntax is currently disallowed in a secure context ({0}).  At line {1}, column {2} of text “{3}”", this.trustedContext, a.line, a.column, this.text);
            return void (0 === this.angularOperatorStack.length && (this.expressionFn = this.$parse(this.text.substring(this.expressionStartIndex, b.index)), 
            this.expressionFn.exp = this.text.substring(this.expressionStartIndex, b.index), 
            this.expressionFn.expressions = this.expressionFn.expressions, this.rule = null, 
            this.rule = this.rulePluralOrSelect));
        }
        if (null != r(e)) return void this.angularOperatorStack.unshift(e);
        var f = s(e);
        if (null == f && this.errorInParseLogic(), this.angularOperatorStack.length > 0) {
            if (f == this.angularOperatorStack[0]) return void this.angularOperatorStack.shift();
            throw a = d(this.text, this.index), t("badexpr", "Unexpected operator “{0}” at line {1}, column {2} in text. Was expecting “{3}”. Text: “{4}”", e, a.line, a.column, r(this.angularOperatorStack[0]), this.text);
        }
        this.index = b.index, this.expressionFn = this.$parse(this.text.substring(this.expressionStartIndex, this.index)), 
        this.expressionFn.exp = this.text.substring(this.expressionStartIndex, this.index), 
        this.expressionFn.expressions = this.expressionFn.expressions, this.rule = null;
    };
    var O = [ "$parse", "$locale", "$sce", "$exceptionHandler", function(a, b, d, e) {
        function f(a, b, f) {
            return function(g) {
                try {
                    return g = a ? d.getTrusted(a, g) : d.valueOf(g), b && void 0 === g ? g : c(g);
                } catch (h) {
                    e(t.interr(f, h));
                }
            };
        }
        function g(c, d, e, g) {
            var h = f(e, g, c), i = new q(c, 0, a, b.pluralCat, h, d, e, g);
            return i.run(i.ruleInterpolate), i.parsedFn;
        }
        return {
            interpolate: g
        };
    } ], P = [ "$$messageFormat", "$delegate", function(a, b) {
        if ("{{" != b.startSymbol() || "}}" != b.endSymbol()) throw t("nochgmustache", "angular-message-format.js currently does not allow you to use custom start and end symbols for interpolation.");
        var c = a.interpolate;
        return c.startSymbol = b.startSymbol, c.endSymbol = b.endSymbol, c;
    } ], Q = a.angular.module("ngMessageFormat", [ "ng" ]);
    Q.factory("$$messageFormat", O), Q.config([ "$provide", function(a) {
        a.decorator("$interpolate", P);
    } ]);
}(window, window.angular);
//# sourceMappingURL=angular-message-format.min.js.map
/*! 康美网络医院 最后修改于： 2016-10-20 */